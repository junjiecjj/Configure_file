# the prompt



# Use emacs keybindings even if our EDITOR is set to vi

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system



# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/jack/.oh-my-zsh"
# zsh-nvm lazy load
export NVM_LAZY_LOAD=true



#打开～/.oh-my-zsh/themes目录下面的任意一个文件
# ZSH_THEME="rkj-repos"   "rkj"  "candy"  "simonoff"  "crcandy"  "Soliah"  "kphoen" "steeef" "dstufft" "dst"  "duellj" "suvash" "fino"  "gnzh"  "bira"
ZSH_THEME="random"
# ZSH_THEME="af-magic "
# ZSH_THEME="agnoster"
# ZSH_THEME="powerlevel9k/powerlevel9k"
# ZSH_THEME="xiong-chiamiov-plus"
ZSH_THEME_RANDOM_CANDIDATES=(
       "gnzh"     "aussiegeek"       "rkj-repos"    "rkj"
        "duellj"    "fino-time"       "xiong-chiamiov-plus"    "myys"
)

ZSH_THEME="purify"
ZSH_THEME="powerlevel10k/powerlevel10k"


plugins=(

    sudo
    z
    cp
    zsh_reload
    safe-paste
    extract
    history-substring-search
    colored-man-pages
    git
    history
    ubuntu
    yum
    pip
    docker
    docker-compose
    golang
    npm
    bower
    adb

    #第三方插件
    zsh-autosuggestions
    zsh-syntax-highlighting
    pyenv-lazy
    autojump
    zsh-nvm

)

source $ZSH/oh-my-zsh.sh


# added by Anaconda3 installer
export PATH="/home/jack/anaconda3/bin:$PATH"
export PYTHONPATH="/usr/local/mdsplus/python/MDSplus"





HIST_STAMPS="yyyy-mm-dd"
DISABLE_UPDATE_PROMPT=true
#source ~/.oh-my-zsh/plugins/incr/incr*.zsh
source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
[[ -s /home/jack/.autojump/etc/profile.d/autojump.sh ]] && source /home/jack/.autojump/etc/profile.d/autojump.sh
autoload -U compinit && compinit -u

# zsh-nvm lazy load
export NVM_LAZY_LOAD=true

#export PS1='$\[\033[01;31m\][\u@\h\[\033[01m\]:\[\033[01;33m\]\w\[\033[01;36m\]\A\[\e[31;1m\]]\[\033[01;32m\]\$ '
#
#color{{{
autoload colors
colors

for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
eval _$color='%{$terminfo[bold]$fg[${(L)color}]%}'
eval $color='%{$fg[${(L)color}]%}'
(( count = $count + 1 ))
done
FINISH="%{$terminfo[sgr0]%}"
#}}}

#命令提示符
#RPROMPT=$(echo "$RED%D %T$FINISH")
#PROMPT=$(echo "$CYAN%n@$YELLOW%M:$GREEN%/$_YELLOW>$FINISH ")

#PROMPT=$(echo "$BLUE%M$GREEN%/
#$CYAN%n@$BLUE%M:$GREEN%/$_YELLOW>>>$FINISH ")
#标题栏、任务栏样式{{{
case $TERM in (*xterm*|*rxvt*|(dt|k|E)term)
precmd () { print -Pn "\e]0;%n@%M//%/\a" }
preexec () { print -Pn "\e]0;%n@%M//%/\ $1\a" }
;;
esac
#}}}

#编辑器
export EDITOR=vim
#输入法
export XMODIFIERS="@im=ibus"
export QT_MODULE=ibus
export GTK_MODULE=ibus
#关于历史纪录的配置 {{{
#历史纪录条目数量
export HISTSIZE=10000
#注销后保存的历史纪录条目数量
export SAVEHIST=10000
#历史纪录文件
export HISTFILE=~/.zhistory
#以附加的方式写入历史纪录
setopt INC_APPEND_HISTORY
#如果连续输入的命令相同，历史纪录中只保留一个
setopt HIST_IGNORE_DUPS
#为历史纪录中的命令添加时间戳
setopt EXTENDED_HISTORY

#启用 cd 命令的历史纪录，cd -[TAB]进入历史路径
setopt AUTO_PUSHD
#相同的历史路径只保留一个
setopt PUSHD_IGNORE_DUPS

#在命令前添加空格，不将此命令添加到纪录文件中
#setopt HIST_IGNORE_SPACE
#}}}

#每个目录使用独立的历史纪录{{{
cd() {
builtin cd "$@"                             # do actual cd
fc -W                                       # write current history  file
local HISTDIR="$HOME/.zsh_history$PWD"      # use nested folders for history
if  [ ! -d "$HISTDIR" ] ; then          # create folder if needed
    mkdir -p "$HISTDIR"
fi
export HISTFILE="$HISTDIR/zhistory"     # set new history file
touch $HISTFILE
local ohistsize=$HISTSIZE
HISTSIZE=0                              # Discard previous dir's history
HISTSIZE=$ohistsize                     # Prepare for new dir's history
fc -R                                       #read from current histfile
}
mkdir -p $HOME/.zsh_history$PWD
export HISTFILE="$HOME/.zsh_history$PWD/zhistory"

function allhistory { cat $(find $HOME/.zsh_history -name zhistory) }
function convhistory {
sort $1 | uniq |
sed 's/^:\([ 0-9]*\):[0-9]*;\(.*\)/\1::::::\2/' |
awk -F"::::::" '{ $1=strftime("%Y-%m-%d %T",$1) "|"; print }'
}
#使用 histall 命令查看全部历史纪录
function histall { convhistory =(allhistory) |
sed '/^.\{20\} *cd/i\\' }
#使用 hist 查看当前目录历史纪录
function hist { convhistory $HISTFILE }

#全部历史纪录 top50
function top50 { allhistory | awk -F':[ 0-9]*:[0-9]*;' '{ $1="" ; print }' | sed 's/ /\n/g' | sed '/^$/d' | sort | uniq -c | sort -nr | head -n 50 }

#}}}

#杂项 {{{
#允许在交互模式中使用注释  例如：
#cmd #这是注释
setopt INTERACTIVE_COMMENTS

#启用自动 cd，输入目录名回车进入目录
#稍微有点混乱，不如 cd 补全实用
setopt AUTO_CD

#扩展路径
#/v/c/p/p => /var/cache/pacman/pkg
setopt complete_in_word

#禁用 core dumps
limit coredumpsize 0

#Emacs风格 键绑定
bindkey -e
#bindkey -v
#设置 [DEL]键 为向后删除
#bindkey "\e[3~" delete-char

#以下字符视为单词的一部分
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
#}}}

#自动补全功能 {{{
setopt AUTO_LIST
setopt AUTO_MENU
#开启此选项，补全时会直接选中菜单项
#setopt MENU_COMPLETE

autoload -U compinit
compinit

#自动补全缓存
#zstyle ':completion::complete:*' use-cache on
#zstyle ':completion::complete:*' cache-path .zcache
#zstyle ':completion:*:cd:*' ignore-parents parent pwd

#自动补全选项
zstyle ':completion:*' verbose yes
zstyle ':completion:*' menu select
zstyle ':completion:*:*:default' force-list always
zstyle ':completion:*' select-prompt '%SSelect:  lines: %L  matches: %M  [%p]'

zstyle ':completion:*:match:*' original only
zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct
zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate

#路径补全
zstyle ':completion:*' expand 'yes'
zstyle ':completion:*' squeeze-shlashes 'yes'
zstyle ':completion::complete:*' '\\'

#彩色补全菜单
eval $(dircolors -b)
export ZLSCOLORS="${LS_COLORS}"
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

#修正大小写
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
#错误校正
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

#kill 命令补全
compdef pkill=kill
compdef pkill=killall
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:processes' command 'ps -au$USER'

#补全类型提示分组
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'

# cd ~ 补全顺序
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
#}}}

##行编辑高亮模式 {{{
# Ctrl+@ 设置标记，标记和光标点之间为 region
zle_highlight=(region:bg=magenta #选中区域
special:bold      #特殊字符
isearch:underline)#搜索时使用的关键字
#}}}

##空行(光标在行首)补全 "cd " {{{
user-complete(){
case $BUFFER in
"" )                       # 空行填入 "cd "
BUFFER="cd "
zle end-of-line
zle expand-or-complete
;;
"cd --" )                  # "cd --" 替换为 "cd +"
BUFFER="cd +"
zle end-of-line
zle expand-or-complete
;;
"cd +-" )                  # "cd +-" 替换为 "cd -"
BUFFER="cd -"
zle end-of-line
zle expand-or-complete
;;
* )
zle expand-or-complete
;;
esac
}
zle -N user-complete
bindkey "\t" user-complete
#}}}

##在命令前插入 sudo {{{
#定义功能
sudo-command-line() {
[[ -z $BUFFER ]] && zle up-history
[[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
zle end-of-line                 #光标移动到行末
}
zle -N sudo-command-line
#定义快捷键为： [Esc] [Esc]
bindkey "\e\e" sudo-command-line
#}}}

# 搞定Home键和小键盘
# Home
bindkey '\e[1~' beginning-of-line
# End
bindkey '\e[4~' end-of-line

# Keypad
# 0 . Enter
bindkey -s "^[Op" "0"
bindkey -s "^[Ol" "."
bindkey -s "^[OM" "^M"
# 1 2 3
bindkey -s "^[Oq" "1"
bindkey -s "^[Or" "2"
bindkey -s "^[Os" "3"
# 4 5 6
bindkey -s "^[Ot" "4"
bindkey -s "^[Ou" "5"
bindkey -s "^[Ov" "6"
# 7 8 9
bindkey -s "^[Ow" "7"
bindkey -s "^[Ox" "8"
bindkey -s "^[Oy" "9"
# + -  * /
bindkey -s "^[Ok" "+"
bindkey -s "^[Om" "-"
bindkey -s "^[Oj" "*"
bindkey -s "^[Oo" "/"


#命令别名 {{{
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias grep='grep --color=auto'
alias pacman='sudo pacman-color'
alias p='sudo pacman-color'
alias y='yaourt'
alias h='htop'
alias vim='vim'
alias nf='neofetch'
alias sf='screenfetch'

#[Esc][h] man 当前命令时，显示简短说明
alias run-help >&/dev/null && unalias run-help
autoload run-help

#历史命令 top10
alias top10='print -l  ${(o)history%% *} | uniq -c | sort -nr | head -n 10'
#}}}


# alias ll='ls -alF --color=auto -h'
# alias la='ls -A --color=auto -h'
# alias l='ls -CF --color=auto -h'
# alias ls='ls -l --color=auto -h'
alias fc='ls -al | grep "^-" | wc -l'
alias fdc='ls -alR | grep "^-" | wc -l'
alias dc='ls -al | grep "^d" | wc -l'

alias a='lsd --icon-theme=fancy'
alias as='lsd -l --icon-theme=fancy'
alias aa='lsd -Al --icon-theme=fancy'
alias al='lsd -alFhv --icon-theme=fancy'
alias at='lsd --tree -alFhv --icon-theme=fancy'

alias o='logo-ls -h'
alias os='logo-ls -lh'
alias oa='logo-ls -Alh'
alias ol='logo-ls -alh'

alias e='exa  --icons --colour-scale --color=always'
alias es='exa -lh  --icons --colour-scale --color=always --time=changed --git'
alias ea='exa -alh  --icons --colour-scale --color=always'
alias el='exa -al -bghHiSr  --icons --colour-scale --color=always  --time=changed --git'
alias et='exa -al -bghHiSr -T --icons --colour-scale --color=always  --time=changed --git'

# alias ll='ls -alF --color=auto -h'
# alias la='ls -A --color=auto -h'
# alias l='ls -CF --color=auto -h'
# alias ls='ls -l --color=auto -h'

# alias l='lsd --icon-theme=fancy'
# alias ls='lsd -l --icon-theme=fancy'
# alias la='lsd -Al --icon-theme=fancy'
# alias ll='lsd -alFhv --icon-theme=fancy'
# alias lt='lsd --tree -alFhv --icon-theme=fancy'

alias l='logo-ls -h'
alias ls='logo-ls -lh'
alias la='logo-ls -Alh'
alias ll='logo-ls -alh'

# alias l='exa  --icons --colour-scale --color=always'
# alias ls='exa -lh  --icons --colour-scale --color=always --time=changed --git'
# alias la='exa -alh  --icons --colour-scale --color=always'
# alias ll='exa -al -bghHiSr  --icons --colour-scale --color=always  --time=changed --git'
# alias lt='exa -al -bghHiSr -T --icons --colour-scale --color=always  --time=changed --git'



LS_COLORS="*.xyz=37;41:*.ts=34"
EXA_COLORS="da=1;34"
EXA_COLORS="hs_err_pid*=37;41;1"

# 性能监控
alias inxi='inxi -b -c31 -F'
alias ds='dstst'
alias gla='glances'
alias tl='tldr'
alias diff='vimdiff'
alias nf='neofetch'
alias sf='screenfetch'

alias bat='batcat --theme=OneHalfLight -n --color=always --decorations=always --style=full --italic-text==always --paging=auto '
alias bata='batcat --theme=OneHalfLight -n --color=always --decorations=always --style=full --italic-text==always --paging=auto  -A'

export BAT_THEME="OneHalfLight"
alias fd='fdfind'
alias fde='fdfind -e'
alias ndu="ncdu --color dark -rr -x --exclude .git --exclude node_modules"

alias ci3='cd ~/.config/i3'
alias cdwm='cd ~/tmp/my-dwm'


alias cc='cd ~/公共的/c文件/'
alias cl='cd ~/公共的/Linux_C'
alias cg='cd ~/公共的/'
alias cf='cd ~/文档/'
alias cs='cd ~/公共的/ShellScript/'
alias cP='cd ~/公共的/Python/'
alias cm='cd ~/公共的/MarkDown/'
alias cmat='cd ~/公共的/MATLAB/'
alias gos='git add .; git commit -m "just update"; git push origin master'
alias gom='git add .; git commit -m "just update"; git push origin main'
alias creatfont='sudo mkfontscale; sudo mkfontdir; sudo fc-cache -fv'


mkd() { mkdir -p "$@" && cd "$1"; }
alias install='sudo apt install'
alias update='sudo apt update'
alias upgrade='sudo apt upgrade -y'
alias up='sudo apt update ; sudo apt upgrade -y; sudo apt autoremove -y'
alias show_dimensions='xdpyinfo | grep '''dimensions:''''
alias list_repos='grep ^[^#] /etc/apt/sources.list /etc/apt/sources.list.d/*'

alias nalainstall='sudo nala install'
alias nalaupdate='sudo nala update'
alias nalaupgrade='sudo nala upgrade'
alias nalaremove='sudo nala remove'
alias nalapurge='sudo nala purge'
alias nalafetch='sudo nala fetch'
alias nalashow='sudo nala show'
alias nalaclean='sudo nala clean'
alias nalahistory='sudo nala history'
alias nalaup='sudo nala update ; sudo nala upgrade'


alias lsblk='lsblk -f'
alias df='df -Thl'


autoload bashcompinit
bashcompinit
source /usr/share/bash-completion/completions/nala


alias v='vim'
alias nm='nvim'

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

export LESS_TERMCAP_mb=$'\E[01;34m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;36;44m'
export LESS_TERMCAP_se=$'\E[0m'

man() {
  env \
  LESS_TERMCAP_mb=$(printf "\e[1;31m") \
  LESS_TERMCAP_md=$(printf "\e[1;31m") \
  LESS_TERMCAP_me=$(printf "\e[0m") \
  LESS_TERMCAP_se=$(printf "\e[0m") \
  LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
  LESS_TERMCAP_ue=$(printf "\e[0m") \
  LESS_TERMCAP_us=$(printf "\e[1;32m") \
  man "$@"
}

rg() {
    if [ -z "$RANGER_LEVEL" ]
    then
        ranger
    else
        exit
    fi
}
export RANGER_LOAD_DEFAULT_RC=FALSE
# ranger 自动进入目录
function ranger-cd {
    # 创建一个临时文件并存储
    tempfile="$(mktemp -t tmp.XXXXXX)"
	# 运行ranger并要求其将最后一条路径输出到临时文件
    ranger --choosedir="$tempfile" "${@:-$(pwd)}"

	# 如果临时文件存在，则读取并且临时文件的内容不等于当前路径
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
		# 将目录更改为临时文件中的路径
        cd -- "$(cat "$tempfile")"
    fi
	# 这行删除临时文件不是非常必要，因为Linux应该在下次启动时处理它
    rm -f -- "$tempfile"
}

alias rcd=ranger-cd

alias racd='ranger --choosedir=$HOME/.rangerdir; LASTDIR=`cat $HOME/.rangerdir`; cd "$LASTDIR"'


lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}
if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
    alias nvim=nvr -cc split --remote-wait +'set bufhidden=wipe'
fi


if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
    export VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
    export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
else
    export VISUAL="nvim"
    export EDITOR="nvim"
fi

#路径别名 {{{
#进入相应的路径时只要 cd ~xxx
hash -d A="/media/ayu/dearest"
hash -d H="/media/data/backup/ayu"
hash -d E="/etc/"
hash -d D="~/公共的/Linux_C"
#}}}

##for Emacs {{{
#在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它
#if [[ "$TERM" == "dumb" ]]; then
#setopt No_zle
#PROMPT='%n@%M %/
#>>'
#alias ls='ls -F'
#fi
#}}}

#{{{自定义补全
#补全 ping
zstyle ':completion:*:ping:*' hosts 192.168.1.{1,50,51,100,101} www.google.com

#补全 ssh scp sftp 等
#zstyle -e ':completion::*:*:*:hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'
#}}}

#{{{ F1 计算器
arith-eval-echo() {
LBUFFER="${LBUFFER}echo \$(( "
RBUFFER=" ))$RBUFFER"
}
zle -N arith-eval-echo
bindkey "^[[11~" arith-eval-echo
#}}}

####{{{
function timeconv { date -d @$1 +"%Y-%m-%d %T" }

# }}}

zmodload zsh/mathfunc
autoload -U zsh-mime-setup
zsh-mime-setup
setopt EXTENDED_GLOB
#autoload -U promptinit
#promptinit
#prompt redhat

setopt correctall
autoload compinstall

#漂亮又实用的命令高亮界面
setopt extended_glob
 TOKENS_FOLLOWED_BY_COMMANDS=('|' '||' ';' '&' '&&' 'sudo' 'do' 'time' 'strace')

 recolor-cmd() {
     region_highlight=()
     colorize=true
     start_pos=0
     for arg in ${(z)BUFFER}; do
         ((start_pos+=${#BUFFER[$start_pos+1,-1]}-${#${BUFFER[$start_pos+1,-1]## #}}))
         ((end_pos=$start_pos+${#arg}))
         if $colorize; then
             colorize=false
             res=$(LC_ALL=C builtin type $arg 2>/dev/null)
             case $res in
                 *'reserved word'*)   style="fg=magenta,bold";;
                 *'alias for'*)       style="fg=cyan,bold";;
                 *'shell builtin'*)   style="fg=yellow,bold";;
                 *'shell function'*)  style='fg=green,bold';;
                 *"$arg is"*)
                     [[ $arg = 'sudo' ]] && style="fg=red,bold" || style="fg=blue,bold";;
                 *)                   style='none,bold';;
             esac
             region_highlight+=("$start_pos $end_pos $style")
         fi
         [[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\|}]}:+yes} = 'yes' ]] && colorize=true
         start_pos=$end_pos
     done
 }
check-cmd-self-insert() { zle .self-insert && recolor-cmd }
 check-cmd-backward-delete-char() { zle .backward-delete-char && recolor-cmd }

 zle -N self-insert check-cmd-self-insert
 zle -N backward-delete-char check-cmd-backward-delete-char


autoload -Uz compinit
compinit
# Completion for kitty
kitty + complete setup zsh | source /dev/stdin

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# eval "$(starship init zsh)"
# ZJ_SESSIONS=$(zellij list-sessions)
# NO_SESSIONS=$(echo "${ZJ_SESSIONS}" | wc -l)

# if [ "${NO_SESSIONS}" -ge 2 ]; then
#     zellij attach \
#     "$(echo "${ZJ_SESSIONS}" | sk)"
# else
#    zellij attach -c
# fi



if command -v theme.sh > /dev/null; then
	[ -e ~/.theme_history ] && theme.sh "$(theme.sh -l|tail -n1)"

	# Optional

	# Bind C-o to the last theme.
	last_theme() {
		theme.sh "$(theme.sh -l|tail -n2|head -n1)"
	}

	zle -N last_theme
	bindkey '^O' last_theme

	alias th='theme.sh -i'

	# Interactively load a light theme
	alias thl='theme.sh --light -i'

	# Interactively load a dark theme
	alias thd='theme.sh --dark -i'
fi

# theme.sh  gruvbox-mix-light-medium
# theme.sh desert-night
# theme.sh mono-amber
# theme.sh elic
# theme.sh apathy
# theme.sh desert
# theme.sh darcula
# theme.sh urple
# theme.sh unikitty-dark

# theme.sh solarized-dark-higher-contrast
# theme.sh  elementary
# theme.sh   warm-neon
# theme.sh pico
# theme.sh tango
# theme.sh mellow-purple
# theme.sh yachiyo
# theme.sh windows-nt
# theme.sh solarized-darcula
# theme.sh freya
# theme.sh solarized-light
# theme.sh molokai
# theme.sh vs-code-dark-plus
# theme.sh goa-base
# theme.sh mathias
# theme.sh vag
# theme.sh aco
# theme.sh man-page
# theme.sh papercolor-light
# theme.sh solarized-light
# theme.sh synth-midnight-light
# theme.sh edge-light
# theme.sh belafonte-day
# theme.sh tokyo-day
# theme.sh ayu-light
# theme.sh clrs
# theme.sh terminal-basic

su() {
	(
		INHIBIT_THEME_HIST=1 theme.sh mono-amber
		trap 'theme.sh "$(theme.sh -l|tail -n1)"' INT
		env su "$@"
		theme.sh "$(theme.sh -l|tail -n1)"
	)
}

sudo() {
	(
		pid=$(exec sh -c 'echo "$PPID"')

		# If the command takes less than .2s, don't change the theme.
		# We could also just match on 'su' and ignore everything else,
		# but this also accomodates other long running commands
		# like 'sudo sleep 5s'. Modify to taste.

		(
				sleep .2s
				ps -p "$pid" > /dev/null && INHIBIT_THEME_HIST=1 theme.sh mono-amber
		) &

		trap 'theme.sh "$(theme.sh -l|tail -n1)"' INT
		env sudo "$@"
		theme.sh "$(theme.sh -l|tail -n1)"
	)
}

ssh() {
	# A tiny ssh wrapper which extracts a theme from ~/.ssh_themes
	# and applies it for the duration of the current ssh command.
	# Each line in ~/.ssh_themes has the format:
	#     <hostname>: <theme>.

	# Restoration relies on the fact that you are using theme.sh to manage
	# the current theme.  (that is, you set the theme in your bashrc.)

	# This can probably be made more robust. It is just a small demo
	# of what is possible.


	touch ~/.ssh_themes

	host="$(echo "$@"|awk '{gsub(".*@","",$NF);print $NF}')"
	theme="$(awk -vhost="$host" -F': *' 'index($0, host":") == 1 {print $2}' < ~/.ssh_themes)"

	if [ -z "$theme" ]; then
		env ssh "$@"
		return
	fi

	INHIBIT_THEME_HIST=1 theme.sh "$theme"
	trap 'theme.sh "$(theme.sh -l|tail -n1)"' INT
	env ssh "$@"
	theme.sh "$(theme.sh -l|tail -n1)"
}

#>>>>>>下面根据当前时间自动随机选择主题
light_theme=(gruvbox-mix-light-medium tokyo-day belafonte-day edge-light ayu-light terminal-basic clrs novel synth-midnight-light solarized-light windows-95-light   papercolor-light gruvbox-light-soft  novel)
L1=${#light_theme[*]}
# echo -e "L1 = ${L1}\n"
index1=$(((${RANDOM} % ${L1}+1)))
# echo -e "index1 = ${index1}\n"

dark_theme=(selenized-dark desert-night solarized-dark tango mellow-purple freya mathias goa-base vs-code-dark-plus  molokai yachiyo solarized-darcula mono-amber elic  desert  apathy  darcula urple warm-neon unikitty-dark elementary  solarized-dark-higher-contrast pico)
L2=${#dark_theme[*]}
# echo -e "L2 = ${L2}\n"
index2=$(((${RANDOM} % ${L2}+1)))
# echo -e "index2 = ${index2}\n"

hour=`date +%H`
# hour=date | awk '{print $5}' | awk -F: '{print $1}'


# echo   "hour = ${hour}"
# echo  ${light_theme[1]}

if (( ${hour}>=7 && ${hour} < 23 ))
then
    # echo -e "现在是白天\n"
    # echo -e "index1 = ${index1}\n"
    # theme.sh ${light_theme[index1]}
    theme.sh novel
    # echo  "白天主题: ${light_theme[index1]}"
else
    # echo -e "现在是晚上\n"
    # theme.sh ${dark_theme[index2]}
    theme.sh solarized-dark
    theme.sh selenized-dark
    # echo  "暗夜主题: ${dark_theme[index1]}"
fi
#<<<<<<




# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/jack/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/jack/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/jack/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/jack/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


export CUDA_HOME=/usr/local/cuda
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CUDA_HOME}/lib64
export PATH=${CUDA_HOME}/bin:${PATH}
export RANGER_LOAD_DEFAULT_RC=FALSE


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

